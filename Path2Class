#!/usr/bin/env perl
#Written by Manan Shah v1.2 
#contact: m.shah@ncl.res.in or manan.b.shah@gmail.com 
#Add comments here to list changelog
use strict;
use warnings;
print "
Path2Class

This Script is designed to convert output of KO2Path to a sublevel level profile using kegg.jp as reference.

Developed on and for Unix/Linux.
If you are behind a proxy (Check README)


Thank you for using this program
--Developed by Manan Shah
contact: m.shah\@ncl.res.in or manan.b.shah\@gmail.com

Free to be modified by fellow researchers. Would suggest adding a comment lines to describe the changes made.
";
																		#opening the Tax4Fun output
my $filepath;
my $keyword;
my $kegg_dir;
if ( exists($ARGV[0])){
	$filepath=$ARGV[0];
}else{
	print "Please Enter File Name:";
	chomp($filepath=<STDIN>);
	$filepath=$filepath;
}
print "\nFile Bieng Processed $filepath\n";
if ( exists($ARGV[1])){
	$keyword=$ARGV[1];
	print "sub-class keyword:$keyword\n";
}else{
	
	print "Sub-Class (Keyword)[Leave Blank If not required]:";
	chomp($keyword=<STDIN>);
}
if ( exists($ARGV[2])){
	$kegg_dir=$ARGV[2];
	print "Folder to store and retrive KEGG data from:$kegg_dir\n";
}else{
	print "Folder to store and retrive KEGG data from\n(Check Readme for Reason):";
	chomp($kegg_dir=<STDIN>);
}

open (my $fh, "<", $filepath) || die "File not found: $filepath";
chomp(my $headerline=<$fh>);
my @headers=split("\t",$headerline);
shift(@headers);														#identifying the sample IDs

my @arrayofhashes;														#declaring global variables
my @unique_slevels;
my $indetcount=0;
my %ClassCount;
my @keyword_array;
my %keyword_profile;
my @sublevel_values;
my $previous_sublevel="";

print "\n";
print "processing identifier no:\n";
foreach my $line (<$fh>){												#reading each line of Tax4Fun file
	if ($line=~/(ko\d+)\s(.+)/){											#identifying kegg orthology identifiers
		if($line!~/^Unknown/){
			print "\b\b\b\b\b";
			my @line_split= split("\t",$2);
			my $kidentifier=$1;
			my $prot=$line_split[0];
			my @slevels=find_slevels($kidentifier,$prot);
			$indetcount++;
			print "$indetcount";
			if (exists $keyword_profile{$kidentifier}){
				$keyword_profile{$kidentifier}=$line;
			}
			if (scalar(@slevels)!=0){
				calculate_slevel_profile($line,\@slevels);
			}
		}
	}
}

close($fh);																#close Tax4Fun file
$filepath=~s/_pathwaysprofile.tsv//g;
my $outfilename=$filepath."_sub-sublevelprofile.tsv";
my $outfile2=$filepath."_class"."$keyword"."_profile.tsv";
my $outfile3=$filepath."_sublevelprofile.tsv";

print "\n\nOutput saved to $outfilename\n";


#Writing Sublevel Profile
open (my $output, ">",$outfilename);									#open OUTPUT file;
print $output "\"KEGG_Class\"\t\"Kegg_Sub_class(Pathway Counts)\"\t";foreach(@headers){print $output "$_\t";};print $output "\n"; #printing the header line in output
open (my $output3, ">",$outfile3);									#open OUTPUT file;
print $output3 "\"KEGG_Class\"\t";foreach(@headers){print $output3 "$_\t";};print $output3 "\n"; #printing the header line in output

@unique_slevels= reverse sort @unique_slevels;
for(my $i=0;$i<=scalar(@unique_slevels);$i++){							#printing the sublevel profile
	my $thisslevel="";
	my $class_count=0;
	if (exists $unique_slevels[$i]){
		$thisslevel=$unique_slevels[$i];
		$class_count=$ClassCount{$thisslevel}/scalar(@headers);
	}
	my $ths2=$thisslevel;
	my $ths3;
	my $sublevel;
	my @this_level_sublevel;
	if($ths2=~/(.*);(.*)/){
		$sublevel=$1;
		$ths3="\"".$1."\"\t\"".$2;
	}else{
		$ths3="\"Unknown\"\t\"".$thisslevel;
		$sublevel="Unknown-$thisslevel";
	}
	print $output "$ths3($class_count)\"\t";
	for(my $x=0;$x<scalar(@headers);$x++){
		if($i<scalar(@unique_slevels)){
		print $output "$arrayofhashes[$x]{$thisslevel}\t";
		push (@this_level_sublevel,$arrayofhashes[$x]{$thisslevel});}
	}
	print $output "\n";
	if($sublevel eq $previous_sublevel){
		for(my $x=0;$x<scalar(@sublevel_values);$x++){
			$sublevel_values[$x]=$sublevel_values[$x]+$this_level_sublevel[$x];
		}
	}
	else{
		my @print_sub=@sublevel_values;
		print $output3 "$previous_sublevel\t";
		for(my $x=0;$x<scalar(@print_sub);$x++){
			print $output3 "$print_sub[$x]\t";
		}
		print $output3 "\n";
		$previous_sublevel=$sublevel;
		@sublevel_values=@this_level_sublevel;
	}
}
close ($output);
close ($output3);
my $delete_line=`head -n -1 $outfilename `;
open (my $output, ">",$outfilename);
print $output $delete_line;
close($output);


#Writing Keyword Profile
if($keyword=~/\w/){
	open (my $output2, ">",$outfile2);									#open OUTPUT file number 2 for keywords;
	print $output2 "\"KEGG_slevel\"\t";foreach(@headers){print $output2 "$_\t";};print $output2 "\n"; #printing the header line in output
	print "the pathways from class with keyword $keyword are: \n";
	for (my $x=0; $x<scalar(@keyword_array);$x++){
		print "$keyword_array[$x]\n";
		print $output2 "$keyword_profile{$keyword_array[$x]}";
	}
	close($output2);
}

sub find_slevels{														#subroutine to fetch kegg slevels from KEGG
	my $kid=$_[0];
	my $prot=$_[1];
	my $ddir=$kegg_dir;
	opendir my $dir, $ddir or die "Cannot open directory: $ddir $!";
	my @kegg_folder = readdir $dir;
	closedir $dir;
	my @try;
	my $keggfolderstring="@kegg_folder";
	if($keggfolderstring=~/\s$kid\s/){
		my $kegg_file=$ddir.$kid;
		@try=`cat $kegg_file`;
	}else{
		my $kegg_file=$ddir.$kid;
		my @try2=`curl -s http://rest.kegg.jp/get/$kid >$kegg_file`;
		@try=`cat $kegg_file`;
	}

	my $flag=0;
	my @out;
	my $ret;
	foreach my $kline(@try){
		if($kline=~/^\w/){$flag=0;}
		if($kline=~/^CLASS\s+(.*)/){
			my $koid=$1;
			push (@out,$koid);
			if($koid=~/$keyword/)
			{
				push(@keyword_array,"$kid");
				$keyword_profile{$kid}="";
			}
		}
		
	}
	if (scalar(@out)<1){push (@out, "unknown class $prot--$kid")}
	return @out;
}



sub calculate_slevel_profile{											#subroutine to process the profile into one table
	my $line=$_[0];
	my $rslevels=$_[1];
	my @slevels=@$rslevels;
	my @raw_values=split("\t",$line);
	shift(@raw_values);
	for(my $i=0;$i<scalar(@headers);$i++){
		my $value=$raw_values[$i];
		my $devidevalues=$value/scalar(@slevels);
		foreach my $slevel(@slevels){
			if ($slevel~~@unique_slevels){
				my $tmp=$ClassCount{$slevel};
				$tmp++;
				$ClassCount{$slevel}=$tmp;
				} else{
					push(@unique_slevels,$slevel);
					$ClassCount{$slevel}=1;
				}
			if (exists $arrayofhashes[$i]{$slevel}){
				my $tmp=$arrayofhashes[$i]{$slevel};
				$tmp=$tmp+$devidevalues;
				$arrayofhashes[$i]{$slevel}=$tmp;
				}else{
					$arrayofhashes[$i]{$slevel}=$devidevalues;
					}
		}

	}

}
